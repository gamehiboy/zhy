<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd">

	<description>Shiro安全配置</description>

    <!-- shiro过滤器 start -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <property name="securityManager" ref="securityManager"></property>  
        <property name="loginUrl" value="/login"></property>  
        <property name="successUrl" value="/index"></property>  
        <!-- <property name="filters">  
            <map>  
                <util:map>
                <entry key="authc">
                    <bean class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter"/>
                </entry>
            </util:map>
            </map>  
        </property>   -->
        <!-- 过滤器链，请求url对应的过滤器 -->  
        <property name="filterChainDefinitions">  
            <value>  
                 /usr = authc
                 /login = authc
                /logout = logout
                /static/** = anon
                /** = user 
            </value>  
        </property>  
    </bean>  
    <!-- shiro过滤器 end -->  
  
    <!-- 保证实现shiro内部的生命周期函数bean的执行 -->  
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />  
  
    <!-- 第三：shiro管理中心类 start-->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
       <!--  <property name="realm" ref="shiroDbRealm"></property>   -->
        <!-- redis缓存 -->  
        <property name="cacheManager" ref="redisCacheManager" />  
        <!-- sessionManager -->  
        <property name="sessionManager" ref="sessionManager"></property>  
    </bean>  
  
    <!-- 項目自定义的Realm 
    <bean id="shiroDbRealm" class="com.sibu.xinweishang.api.shiro.realm.ShiroDbRealm"/>
    -->
    <!-- 自定义redisManager-redis -->  
    <bean id="redisCacheManager" class="com.sibu.xinweishang.common.redis.RedisCacheManager">  
        <property name="redisManager" ref="redisManager" />  
    </bean>  
    <!-- 自定义cacheManager -->  
    <bean id="redisCache" class="com.sibu.xinweishang.common.redis.RedisCache">  
        <constructor-arg ref="redisManager"></constructor-arg>  
    </bean>  
  
    <bean id="redisManager" class="com.sibu.xinweishang.common.redis.RedisManager"></bean>  
  
  
    <!-- session会话存储的实现类 -->  
    <bean id="redisShiroSessionDAO" class="com.sibu.xinweishang.common.redis.RedisSessionDAO">  
        <property name="redisManager" ref="redisManager" />  
    </bean>  
  
    <!-- sessionManager -->  
    <!-- session管理器 -->  
    <bean id="sessionManager"  
        class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">  
        <!-- 设置全局会话超时时间，默认30分钟(1800000) -->  
        <property name="globalSessionTimeout" value="1800000" />  
        <!-- 是否在会话过期后会调用SessionDAO的delete方法删除会话 默认true -->  
        <property name="deleteInvalidSessions" value="true" />  
  
        <!-- 会话验证器调度时间 -->  
        <property name="sessionValidationInterval" value="1800000" />  
  
        <!-- session存储的实现 -->  
        <property name="sessionDAO" ref="redisShiroSessionDAO" />  
        <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->  
        <property name="sessionIdCookie" ref="sharesession" />  
        <!-- 定时检查失效的session -->  
        <property name="sessionValidationSchedulerEnabled" value="true" />  
  
    </bean>  
  
  
    <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->  
    <bean id="sharesession" class="org.apache.shiro.web.servlet.SimpleCookie">  
        <!-- cookie的name,对应的默认是 JSESSIONID -->  
        <constructor-arg name="name" value="SHAREJSESSIONID" />  
        <!-- jsessionId的path为 / 用于多个系统共享jsessionId -->  
        <property name="path" value="/" />  
        <property name="httpOnly" value="true"/>  
    </bean>  
  
  
    <!-- 第一：shiro于数据交互的类 ，自己写的类的实现-ShiroRealmBean自己重写的类的实现 -->  
    <!-- <bean id="shiroRealm" class="com.tgb.itoo.authority.service.ShiroRealmBean">  
        <property name="defaultRoles" value="user"></property>  
  
        注入自己实现的类，授权的过程-PermissionManager是云平台重写的授权的过程，用户Id->角色->资源->查找权限-李社河2015年4月15日  
        <property name="permissionMgr" ref="PermissionManager"></property>  
        <property name="casServerUrlPrefix" value="${casServerUrlPrefix}"></property>  
        <property name="casService" value="${casService}"></property>  
    </bean>   -->
    <!-- 項目自定义的Realm 
    <bean id="shiroRealm" class="io.longyuan.shiro.redissession.realm.ShiroDbRealm"/>
  	-->
    <!-- 开启shiro的注解，需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->  
    <bean  
        class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"  
        depends-on="lifecycleBeanPostProcessor"></bean>  
    <bean  
        class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
        <property name="securityManager" ref="securityManager" />  
    </bean>  
</beans>
